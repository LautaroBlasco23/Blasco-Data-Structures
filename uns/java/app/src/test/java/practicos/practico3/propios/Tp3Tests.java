/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package practicos.practico3.propios;

import org.junit.Before;
import org.junit.Test;

import practicos.practico3.EjerciciosTP3;

import static org.junit.Assert.*;

import java.util.ArrayList;

public class Tp3Tests {
    // ------------------------------------------------------------------------------------------
    // TESTS PROPIOS
    // ------------------------------------------------------------------------------------------

    // Creamos una instancia de la clase que contiene todos los ejercicios del practico N°3.
    private EjerciciosTP3<Integer> tester;
    
    @Before
    public void setUp() {
        tester = new EjerciciosTP3<>();
    }
    // Ejercicio 1. Comprobar que un elemento pertenece a la lista.
    @Test public void ejercicio1() {
        // Creamos la lista
        ArrayList<Integer> lista1 = new ArrayList<Integer>();

        // Agregamos algunos elementos
        lista1.add(1);
        lista1.add(2);
        lista1.add(3);
        lista1.add(4);


        assertTrue("Debería devolver true", tester.ej1aPertenece(lista1, 4));
        assertFalse("Deberia devolver false", tester.ej1aPertenece(lista1, 10));
    }

    @Test public void Ejercicio2() {
        // Ejercicio 2a: Intercalar
        // Creamos las listas
        ArrayList<Integer> lista1 = new ArrayList<Integer>();
        ArrayList<Integer> lista2 = new ArrayList<Integer>();

        // Agregamos algunos elementos. (Que sean visualmente distinguibles).
        for (int i = 1; i < 10; i++) {
            lista1.add(i);
        }
        for (int i = 201; i < 205; i++) {
            lista2.add(i);
        }

        // Creo la lista intercalada manualmente, para después compararla contra el return del ejercicio.
        ArrayList<Integer> listaResultado = new ArrayList<Integer>();
        for (int i = 1; i < 10; i++) {
            listaResultado.add(i);
            if (i < 5) {
                listaResultado.add(i+200);
            }
        }
        assertEquals("Deberían ser iguales", tester.ej2aIntercalar(lista1, lista2), listaResultado);

        // Ejercicio 2b: Intercalar ordenado
        // Creo listas con elementos repetidos
        ArrayList<Integer> lista3 = new ArrayList<Integer>();
        ArrayList<Integer> lista4 = new ArrayList<Integer>();

        // Agrego los mismos elementos, pero está vez los ingreso repetidos.
        for (int i = 1; i < 10; i++) {
            lista3.add(i);
            lista3.add(i);
        }
        for (int i = 201; i < 205; i++) {
            lista4.add(i);
            lista4.add(i);
        }

        // Ingreso los elementos sin repetirlos.
        ArrayList<Integer> listaSegundoResultado = new ArrayList<Integer>();
        for (int i = 1; i < 10; i++) {
            listaSegundoResultado.add(i);
        }
        for (int i = 201; i < 205; i++) {
            listaSegundoResultado.add(i);
        }
        assertEquals("Deberían ser iguales", tester.ej2bIntercalarOrdenado(lista3, lista4), listaSegundoResultado);
    }

    // Ejercicio 3: Invertir
    @Test public void Ejercicio3() {
        // Creamos la lista
        ArrayList<Integer> lista1 = new ArrayList<Integer>();

        // Agregamos algunos elementos
        lista1.add(1);
        lista1.add(2);
        lista1.add(3);
        lista1.add(4);

        ArrayList<Integer> listaInvertida = new ArrayList<Integer>();

        // Agregamos algunos elementos
        listaInvertida.add(4);
        listaInvertida.add(3);
        listaInvertida.add(2);
        listaInvertida.add(1);

        // Invertimos la lista usando el método creado.
        tester.ej3Invertir(lista1);

        assertEquals("Deberían ser iguales", lista1, listaInvertida);
    }

    @Test public void Ejercicio4() {
        // Creamos la lista
        ArrayList<Integer> lista1 = new ArrayList<Integer>();
        ArrayList<Integer> lista2 = new ArrayList<Integer>();


        // Agregamos elementos en forma creciente y después en forma decreciente.
        for (int i = 1; i < 11; i++) {
            if (i < 6) {
                lista1.add(i);
            } else {
                lista1.add(11-i);
            }
        }

        // Agregamos a la segunda lista los elementos correspondientes.
        for (int i = 1; i < 6; i++) {
            lista2.add(i);
        }

        assertTrue("Debería devolver True", tester.ej4RespetaFormato(lista1, lista2));

        // Eliminamos el último elemento de la lista1. por lo tanto ya no se cumpliría la regla.
        lista1.remove(lista1.size() - 1);
        assertFalse("Debería devolver False", tester.ej4RespetaFormato(lista1, lista2));

    }

    // Ejercicio 5: Eliminar.
    // Elimina todos los elementos de l2 en l1 y luego ingresa todos los elementos
    // de l2 en l1 pero en orden inverso.
    @Test public void Ejercicio5() {
        // Creamos las listas
        ArrayList<Integer> lista1 = new ArrayList<Integer>();
        ArrayList<Integer> lista2 = new ArrayList<Integer>();
        ArrayList<Integer> listaResultado = new ArrayList<Integer>();


        // Agregamos algunos elementos
        for (int i = 0; i < 10; i++) {
            if (i < 4) {
                // Lista2 solo tiene [0,1,2,3]
                lista2.add(i);
            } else {
                listaResultado.add(i);
            }
            // Lista1 tiene [0,1,2,3,4,5,6,7,8,9]
            lista1.add(i);
        }

        // Agregamos los 4 elementos de lista2 en la lista resultado de forma invertida.
        for (int i = 3; i>=0; i--) {
            // ListaResultado quedaría: [4,5,6,7,8,9,3,2,1,0]
            listaResultado.add(i);
        }
        
        // Ejecutando el ej5 lista1 debería quedar igual que listaResultado.
        tester.ej5Eliminar(lista1, lista2);
        assertEquals(lista1, listaResultado);
    }
}